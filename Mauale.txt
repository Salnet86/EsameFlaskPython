Questo codice rappresenta un'applicazione web sviluppata in Python utilizzando il framework Flask, che interagisce con un database MySQL per registrare e visualizzare dati relativi a temperatura e umidità. Inoltre, utilizza le librerie Pandas e Matplotlib per la visualizzazione grafica dei dati in formato grafico.

Importazioni:

pandas viene importato per la gestione dei dati.
mysql.connector permette la connessione al database MySQL.
Flask e vari moduli di Flask (Response, request, render_template, redirect, url_for) servono per gestire le richieste HTTP e le risposte dell'applicazione web.
matplotlib.pyplot e FigureCanvasAgg sono utilizzati per creare e gestire grafici.
Definizione dell'applicazione Flask:

L'applicazione è istanziata tramite app = Flask(__name__), definendo il punto di partenza per l'intero progetto Flask.
Funzione get_db_connection():

Questa funzione stabilisce una connessione al database MySQL utilizzando le credenziali fornite (localhost, martina, figa, sb).
Rotta /index:

Questa rotta serve la pagina insert.html, che presumibilmente contiene un modulo per inserire dati.
Rotta /TP:

Mostra la pagina Record.html, che può essere utilizzata per visualizzare i record inseriti.
Rotta /temp:

Gestisce sia richieste GET che POST. Quando viene inviata una richiesta POST, l'applicazione raccoglie i dati di temperatura e umidità dal modulo, li inserisce nella tabella TM del database e ricarica la pagina insert.html.
Rotta /temp_delete:

Permette la cancellazione di un record dal database tramite il suo ID, inviato attraverso un modulo POST. Dopo aver eliminato il record, l'utente viene reindirizzato alla rotta temRecord.
Rotta /TP_record:

Questa rotta esegue una query SQL per ottenere i dati della tabella TM (id, temperatura, umidità) e li visualizza nella pagina Record.html.
Rotta /show:

Viene creata una visualizzazione grafica che confronta i dati di temperatura e umidità. Il grafico viene generato utilizzando Pandas per l'elaborazione dei dati e Matplotlib per la rappresentazione grafica.
Il grafico è visualizzato come immagine PNG grazie a FigureCanvas, e la risposta HTTP restituisce l'immagine come contenuto della risposta.
In sintesi, l'applicazione permette di inserire, visualizzare e cancellare dati dal database MySQL e di visualizzare i dati di temperatura e umidità in formato grafico. Il flusso di lavoro dell'applicazione coinvolge il rendering di moduli HTML, l'interazione con un database MySQL, e la generazione di grafici dinamici.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Importazione delle librerie:

import pandas as pnd  
import mysql.connector
from flask import Flask, Response, request, render_template, redirect, url_for
import matplotlib.pyplot as plt
import io
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas


pandas (pnd): Utilizzata per la gestione e l'analisi dei dati tabulari (simili a fogli di calcolo).
mysql.connector: Una libreria che permette di connettersi e interagire con un database MySQL.
Flask e altre componenti:
Flask: Micro-framework per creare applicazioni web.
Response: Serve per restituire risposte HTTP.
request: Usato per gestire i dati inviati tramite richieste HTTP (GET e POST).
render_template: Per renderizzare file HTML.
redirect e url_for: Per gestire redirezioni tra le pagine.
matplotlib.pyplot (plt): Usato per la creazione di grafici.
io: Usato per gestire gli stream di dati (qui per la generazione dell’immagine in memoria).
FigureCanvasAgg: Serve per renderizzare i grafici matplotlib in formato immagine.


Creazione dell'applicazione Flask:

app = Flask(__name__)
app: Definisce l'applicazione Flask.
Funzione per connettersi al database:

def get_db_connection():
    return mysql.connector.connect(
        host='localhost',
        user='martina',
        password='',
        database=''
    )

Questa funzione restituisce una connessione al database MySQL utilizzando le credenziali fornite. (In un contesto reale, è importante proteggere la password).

Route /index (pagina iniziale):
@app.route('/index')
def homeindex():
    return render_template('insert.html')


Quando un utente accede a /index, Flask restituisce la pagina HTML insert.html. Questa pagina sarà probabilmente un form per l'inserimento di dati.
Route /TP (pagina di visualizzazione record):

@app.route('/TP')
def temp_md():
    return render_template('Record.html')



Questa route restituisce il template Record.html, che potrebbe mostrare i dati registrati.
Route /temp (inserimento di temperatura e umidità)



@app.route('/temp', methods=['GET', 'POST'])
def temp():
    if request.method == 'POST':
        temp = request.form['temperatura']
        umid = request.form['umidita']
  
        insert_st = "INSERT INTO TM (temperatura, umidita) VALUES (%s, %s)"
        conn = get_db_connection()
        try:
            cursor = conn.cursor()
            cursor.execute(insert_st, (temp, umid))
            conn.commit()
        finally:
            cursor.close()
            conn.close()
        return render_template('insert.html')





Questa funzione gestisce l'inserimento di temperatura e umidità:
Se il metodo è POST (cioè se il form viene inviato), la funzione recupera i dati dal form HTML.
INSERT INTO TM: Inserisce i valori di temperatura e umidità nella tabella TM.
La connessione al database viene gestita tramite get_db_connection().
Dopo l'inserimento, si restituisce nuovamente la pagina insert.html.
Route /temp_delete (eliminazione record):




@app.route('/temp_delete', methods=['POST'])
def tempdelete():
    if request.method == 'POST':
        id_to_delete = request.form.get('id')  
        delete_st = "DELETE FROM TM WHERE id = %s"
        conn = get_db_connection()
        try:
            cursor = conn.cursor()
            cursor.execute(delete_st, (id_to_delete,))
            conn.commit()
        finally:
            cursor.close()
            conn.close()
        return redirect(url_for('temRecord')) //----return redirect(url_for('temRecord')) # nella funzione temRecord()
                                  |--------------> metto la funzione temRecord()





Questa funzione consente di eliminare un record dal database.
Recupera l'ID del record da eliminare dal form HTML.
Esegue un comando DELETE per rimuovere il record dalla tabella TM.
Dopo l'eliminazione, redirige alla pagina dei record usando temRecord.




Route /TP_record (visualizzazione dei dati):

@app.route('/TP_record') 
def temRecord():
    conn = get_db_connection()  
    try:
        cursor = conn.cursor()
        query = "SELECT id, temperatura, umidita FROM TM;"
        cursor.execute(query)
        data = cursor.fetchall()
    finally:
        cursor.close()  
        conn.close()  
    return render_template("Record.html", data=data)


Recupera tutti i dati dalla tabella TM e li passa al template Record.html, che li visualizza.
Usa un SELECT per ottenere i dati di temperatura e umidità dal database.
Route /show (visualizzazione grafico):



@app.route('/show')
def show_tem():
        conn = get_db_connection()
   
        df = pnd.read_sql("SELECT id, temperatura, umidita FROM TM", conn)

       
        fig, ax = plt.subplots()
        df.plot(kind="bar", x="umidita", y="temperatura", ax=ax)

       
        ax.set_title('Temperature vs Humidity')
        ax.set_xlabel('Humidity')
        ax.set_ylabel('Temperature')

       
        img = io.BytesIO()
        FigureCanvas(fig).print_png(img)  
        img.seek(0)
        plt.close(fig)  

       
        return Response(img.getvalue(), mimetype='image/png')
    
    
        conn.close()


/show genera un grafico che mostra la relazione tra umidità e temperatura:
Legge i dati dal database in un DataFrame pandas.
Crea un grafico a barre con matplotlib.
Salva il grafico in un buffer di memoria (io.BytesIO()) e lo restituisce come un'immagine PNG.
Response(img.getvalue(), mimetype='image/png'): Restituisce l'immagine in risposta alla richiesta.

Avvio dell'applicazione:


if __name__ == '__main__':
    app.run(debug=True)

-----------------------------------------------HTML----------------------------------------------------------------
Questa è una pagina HTML che permette agli utenti di inserire la temperatura e l'umidità tramite un modulo (form) e inviare i dati al server. Vediamo il contenuto parte per parte.

1. Dichiarazione del tipo di documento:
<!DOCTYPE html>
<html lang="en">

<!DOCTYPE html>: Dichiarazione che specifica che il documento è un file HTML5.
<html lang="en">: Indica che la lingua principale della pagina è l'inglese.
 Sezione <head>:
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Temperature and Humidity Form</title>
    <style>
        ...
    </style>
</head>

<meta charset="UTF-8">: Definisce la codifica dei caratteri come UTF-8, che supporta una vasta gamma di caratteri.
<meta name="viewport" content="width=device-width, initial-scale=1.0">: Imposta la larghezza della pagina in modo che corrisponda alla larghezza dello schermo del dispositivo (utile per la compatibilità con dispositivi mobili).
<title>Temperature and Humidity Form</title>: Il titolo della pagina, che apparirà nella scheda del browser.
<style>: Contiene regole CSS per la formattazione della pagina. Il CSS definisce lo stile di vari elementi come il corpo della pagina, i campi di input e i pulsanti.


3. Stile del CSS:


<style>
    body {
        font-family: Arial, sans-serif;
        margin: 20px;
    }
    form {
        max-width: 300px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }
    input[type="number"] {
        width: 100%;
        padding: 8px;
        margin: 5px 0;
        border: 1px solid #ccc;
        border-radius: 4px;
    }
    input[type="submit"] {
        background-color: #4CAF50;
        color: white;
        padding: 10px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    input[type="submit"]:hover {
        background-color: #45a049;
    }
</style>



body: Definisce la font (Arial), e aggiunge un margine di 20px tutto intorno al contenuto della pagina.
form: Imposta lo stile del form, limitando la sua larghezza a 300px, aggiungendo padding e bordi.
input[type="number"]: Stile per i campi numerici del form, con larghezza completa, padding e bordi arrotondati.
input[type="submit"]: Stile per il pulsante di invio, con un colore di sfondo verde e testo bianco. Quando il pulsante viene "hoverato" (con il mouse sopra), il colore di sfondo cambia leggermente.



. Corpo del documento:



<body>
    <form method="POST" action="/temp">
        <label for="temperatura">Temperature:</label>
        <input type="number" name="temperatura" placeholder="Enter temperature" required><br>
        <label for="umidita">Humidity:</label>
        <input type="number" name="umidita" placeholder="Enter humidity" required><br>
        <input type="submit" value="Submit">
        <p><a href="http://127.0.0.1:5000/TP_record">Record</a></p>
    </form>

<form method="POST" action="/temp">: Crea un form che invia i dati utilizzando il metodo POST all'URL /temp.
<label for="temperatura">Temperature:</label>: Etichetta per il campo della temperatura.
<input type="number" name="temperatura" placeholder="Enter temperature" required>: Campo di input per inserire un numero che rappresenta la temperatura. Il campo è obbligatorio grazie all'attributo required.
<label for="umidita">Humidity:</label>: Etichetta per il campo dell'umidità.
<input type="number" name="umidita" placeholder="Enter humidity" required>: Campo di input per inserire un numero che rappresenta l'umidità.
<input type="submit" value="Submit">: Pulsante per inviare i dati del form.
<p><a href="http://127.0.0.1:5000/TP_record">Record</a></p>: Un link che rimanda alla pagina /TP_record, probabilmente per visualizzare i dati inseriti.
5. Script JavaScript:





<script>
    document.querySelector('form').addEventListener('submit', function(event) {
        const temp = document.querySelector('input[name="temperatura"]').value;
        const humidity = document.querySelector('input[name="umidita"]').value;
        alert(`Temperature: ${temp}, Humidity: ${humidity}`);
    });
</script>


Questo script JavaScript aggiunge un listener all'evento submit del form.
Quando il form viene inviato, lo script raccoglie i valori della temperatura e dell'umidità dai campi del form e mostra un alert (una finestra di notifica) con quei valori.
event.preventDefault() non è utilizzato, quindi il form continua ad essere inviato normalmente, ma prima appare l'alert.
Funzione complessiva:
Il form permette all'utente di inserire i valori di temperatura e umidità.
I dati vengono inviati al server quando si clicca Submit.
Il link Record consente di visualizzare i dati già inseriti nella tabella.
Il piccolo script JavaScript mostra un'anteprima dei dati con un alert prima che il form venga inviato.


---------------------------------------------------------------------HTML-----------------------------------------------------------------------------------------

Questa è una pagina HTML con integrazioni di template Jinja2, utilizzata per visualizzare e gestire i record di temperatura e umidità salvati in un database. La pagina include una tabella con i dati e un grafico per visualizzare le informazioni. Ora analizziamo il codice pezzo per pezzo.



1. Dichiarazione del tipo di documento:
<!DOCTYPE html>
<html lang="en">



<!DOCTYPE html>: Specifica che questo è un documento HTML5.
<html lang="en">: Indica che la lingua principale della pagina è l'inglese.
2. Sezione <head>:

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Temperature Records</title>
    <style>
        ...
    </style>
</head>




<meta charset="UTF-8">: Definisce la codifica dei caratteri come UTF-8.
<meta name="viewport" content="width=device-width, initial-scale=1.0">: Fa in modo che la pagina sia compatibile con dispositivi mobili, adattando la larghezza del contenuto alla larghezza dello schermo.
<title>: Il titolo della pagina, che appare nella scheda del browser come "Temperature Records".
<style>: Il CSS integrato definisce lo stile della pagina e degli elementi, inclusi il corpo, la tabella, i pulsanti e l'intestazione.












 Stile CSS:

<style>
    body {
        font-family: Arial, sans-serif;
        margin: 20px;
    }
    table {
        width: 100%;
        border-collapse: collapse;
    }
    th, td {
        padding: 10px;
        text-align: left;
    }
    th {
        background-color: #f2f2f2;
    }
    tr:nth-child(even) {
        background-color: #f9f9f9;
    }
    button {
        padding: 10px 15px;
        background-color: #007BFF;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }
    button:hover {
        background-color: #0056b3;
    }
</style>


body: Il corpo della pagina usa il font Arial e ha un margine di 20px.
table: La tabella occupa il 100% della larghezza disponibile e ha i bordi uniti con il comando border-collapse.
th, td: Definisce il padding per le celle della tabella e allinea il testo a sinistra.
th: Le celle di intestazione (header) della tabella hanno uno sfondo leggermente grigio (#f2f2f2).
tr:nth-child(even): Le righe pari hanno uno sfondo leggermente più chiaro, per distinguere meglio le righe.
button: Lo stile per il pulsante di eliminazione ha uno sfondo blu (con l'hover che lo rende più scuro), testo bianco, bordi arrotondati e un effetto al passaggio del mouse.











 Corpo del documento (<body>):



<body>
    <h1 style="text-align: center;">Temperature Records</h1>
    {% if data %}
        <form action="{{ url_for('tempdelete') }}" method="POST">
            <table border="1">
                <thead>
                    <tr>
                        <th scope="col">Select</th>
                        <th scope="col">ID</th>
                        <th scope="col">Temperature (°C)</th>
                        <th scope="col">Humidity (%)</th>
                    </tr>
                </thead>
                <tbody>
                    {% for row in data %}
                        <tr>
                            <td><input type="radio" name="id" value="{{ row[0] }}" required></td>
                            <td>{{ row[0] }}</td>
                            <td>{{ row[1] }}</td>
                            <td>{{ row[2] }}</td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
            <button type="submit">Delete Selected Record</button>
        </form>
    {% else %}
        <p style="text-align: center;">No records found.</p>
    {% endif %}




<h1 style="text-align: center;">Temperature Records</h1>: Intestazione principale, centrata, che indica il titolo della pagina.

{% if data %}: Condizione Jinja2 che verifica se esistono dati (records). Se sì, la tabella viene generata; altrimenti, verrà mostrato il messaggio "No records found."

<form action="{{ url_for('tempdelete') }}" method="POST">: Il form invia una richiesta POST al server per eliminare il record selezionato. url_for('tempdelete') costruisce dinamicamente l'URL per l'endpoint tempdelete.

Tabella:

Ogni record viene visualizzato in una riga della tabella, con le colonne: Seleziona (radio button per selezionare il record da eliminare), ID, Temperatura, e Umidità.
{% for row in data %}: Ciclo che itera su ogni record (riga) del database e popola la tabella.
<input type="radio" name="id" value="{{ row[0] }}" required>: Un campo di tipo radio per selezionare il record da eliminare. Il valore dell'attributo value è l'ID del record. Solo un record può essere selezionato (perché è un radio button).
<button type="submit">Delete Selected Record</button>: Pulsante per inviare il form e cancellare il record selezionato.

{% else %}: Se non ci sono dati da visualizzare, appare il messaggio "No records found."






. Grafico:


<h1 style="text-align: center;">Temperature and Humidity</h1>
<img src="{{ url_for('show_tem') }}" alt="Temperature and Humidity Plot">


<h1>: Un'altra intestazione centrata per indicare che segue un grafico di temperatura e umidità.
<img src="{{ url_for('show_tem') }}" alt="Temperature and Humidity Plot">: Visualizza un'immagine con il grafico generato dalla funzione Flask show_tem. url_for('show_tem') crea dinamicamente l'URL per l'endpoint che serve l'immagine del grafico.
Funzione complessiva:
La pagina permette di visualizzare i record di temperatura e umidità in una tabella. Gli utenti possono selezionare un record e cancellarlo.
Se non ci sono record, viene mostrato un messaggio alternativo.
Inoltre, c'è una sezione che mostra un grafico di temperatura e umidità generato dinamicamente tramite l'endpoint show_tem.




--------------------------------------sql -------------------------------------

CREATE TABLE TM (
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    temperatura INT,
    umidita INT
);
























































